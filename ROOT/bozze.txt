        cAngleGraphs = new TCanvas(Form("Directions: %d", i),Form("Directions: %d", i),900,700);
        cAngleGraphs -> cd();

        tProjFile = new TFile(Form("../ROOT/Tree%d.root",i),"RECREATE");
        tProj = new TTree(Form("Proj_%d", i),Form("Proj_%d", i));

        tProj -> Branch("ProjX", &projXAngle, "ProjX/D");
        tProj -> Branch("ProjY", &projYAngle, "ProjY/D");
        tProj -> Branch("pDirX", &pDirX, "pDirX/D");
        tProj -> Branch("pDirY", &pDirY, "pDirY/D");
        tProj -> Branch("pDirZ", &pDirZ, "pDirZ/D");
        tProj -> Branch("Theta", &Theta, "Theta/D");
        tProj -> Branch("Phi", &Phi, "Phi/D");


        Edep -> SetBranchAddress(BranchName[6].Data(), &pDirX);
        Edep -> SetBranchAddress(BranchName[7].Data(), &pDirY);
        Edep -> SetBranchAddress(BranchName[8].Data(), &pDirZ);

        mgAngles = new TMultiGraph();

        for(int k = 0; k < (Edep -> GetEntries()); ++k)
        {
            Edep -> GetEntry(k);
            Norm= TMath::Sqrt(pDirX*pDirX + pDirY*pDirY + pDirZ*pDirZ);
            nDirX = -pDirX/Norm;
            nDirY = -pDirY/Norm;
            nDirZ = -pDirZ/Norm;

            Theta = TMath::ACos(nDirZ);
            Phi   = TMath::ATan2(nDirY, nDirX);

            projXAngle = (Theta) * TMath::Cos(Phi) * (180/TMath::Pi());
            projYAngle = (Theta) * TMath::Sin(Phi) * (180/TMath::Pi());

            tProj -> Fill();
        }

        Edep -> AddFriend(tProj);
        tProjFile -> Write();
        

        cout << Form("Particle %d", i) << endl;
        cout << "Copy No \t Std X \t Std Y \t # Events " << endl;
        for(int k = 0 ; k < Ntot; ++k)
        {
            
            Edep -> Draw("ProjY:ProjX", ConditionGoodEventsSinglePair[k].Data(), "");
            gAngles[k] = new TGraph(Edep->GetSelectedRows(), Edep->GetV2(), Edep->GetV1());
            gAngles[k] -> SetMarkerColor(ColorsPlot[k]);
            gAngles[k] -> SetMarkerStyle(8);
            gAngles[k] -> SetMarkerSize(0.6);

            gAngles[k] -> Print();

            //gAngles[CopyNumber] -> Print();
            cout << Form("%d \t%g \t%g", k, gAngles[k]-> GetRMS(1), gAngles[k]-> GetRMS(2)) << " " << Edep->GetSelectedRows()<< endl;
            mgAngles -> Add(gAngles[k]);
            if(i > 0)
            {
                mgAnglesProtonsAlpha -> Add(gAngles[k]);
            }
        }

        gPad -> SetGrid();
        mgAngles -> GetXaxis() -> SetTitle("Angle projection X [deg]");
        mgAngles -> GetYaxis() -> SetTitle("Angle projection Y [deg]");

        mgAngles -> GetXaxis() -> SetRangeUser(-180, 180);
        mgAngles -> GetYaxis() -> SetRangeUser(-180, 180);

        mgAngles -> Draw("AP");


        cAngleGraphs -> SaveAs(Form("../docs/Angles_%d.pdf", i));
        cAngleGraphs -> SaveAs(Form("../docs/Angles_%d.svg", i));
        cAngleGraphs -> SaveAs(Form("../docs/Angles_%d.png", i));
